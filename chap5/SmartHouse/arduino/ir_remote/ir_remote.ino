
#include <Max3421e.h>
#include <Usb.h>
#include <AndroidAccessory.h>

// デジタル出力ピンの定義
#define DOUT0 2
#define DOUT1 3
#define DOUT2 4
#define DOUT3 5

// 赤外線信号出力
#define IR_OUT DOUT1

// サンヨーエアコン
int DATA_AC_ON[] = {3416,1540,532,388,476,336,516,336,516,344,496,376,476,328,524,1164,528,344,492,328,520,328,524,328,512,332,524,332,516,336,516,344,500,328,520,332,520,328,524,1160,532,336,496,1164,536,336,492,336,516,328,520,332,520,328,516,328,524,348,496,332,516,328,524,328,520,1164,532,1152,532,1144,536,336,492,1172,528,344,492,328,512,1172,532,340,492,336,508,1172,528,336,496,332,520,336,508,336,516,328,520,1164,536,336,492,1172,528,336,492,1168,532,336,500,1160,536,336,492,328,524,328,516,336,512,336,516,1164,528,336,500,1168,532,1144,532,336,496,1172,532,1144,536,336,492,328,520,332,516,1168,532,332,500,328,524,328,512,332,520,336,516,336,508,328,520,332,520,328,524,328,516,336,512,336,516,328,524,328,520,332,512,376,476,336,516,336,516,328,512,332,520,328,524,328,516,336,512,332,520,328,524,328,520,332,512,336,516,336,516,328,512,332,520,328,524,328,524,336,504,1172,528,336,500,328,516,328,524,1168,528,336,500,328,524,328,512,332,520,336,508,336,516,328,520,332,520,328,524,328,516,336,512,336,516,328,524,328,512,332,520,336,516,336,516,328,512,1172,528,336,500,336,508,336,516,328,520,332,512,1172,528,344,492,336,516,328,512,332,520,328,524,328,520,336,516,336,508,328,524,372,476,1164,532,340,492,1164,536,1148,528,344,492,336,504,1172,528,344,500, 0};
int DATA_AC_OFF[] = {3416,1556,532,340,516,336,524,328,520,332,512,332,520,328,516,1168,524,336,504,332,520,328,524,328,516,336,504,336,516,328,524,328,520,332,520,328,516,336,508,1176,532,344,480,1180,516,340,500,380,472,328,524,328,520,328,516,336,508,380,472,328,520,332,520,328,524,1168,524,1152,532,1152,524,340,492,1180,520,336,492,328,524,1168,532,340,492,1164,448,424,492,328,524,336,504,336,516,328,524,328,512,1180,524,340,492,1172,528,336,492,1168,532,344,492,1160,536,336,492,328,524,336,516,336,504,332,520,1172,528,336,492,1168,532,1152,532,336,488,1172,532,1152,520,344,492,328,524,336,432,400,532,332,512,328,516,328,528,332,520,336,516,336,508,328,520,332,512,384,476,328,516,336,512,336,508,332,520,328,524,328,520,328,516,336,516,336,516,328,512,332,512,384,476,380,472,380,472,372,472,328,520,328,524,328,520,332,520,336,508,328,516,328,528,332,512,328,524,336,516,1164,536,336,488,332,520,328,524,1168,532,336,488,332,520,328,524,328,524,332,508,380,472,328,524,328,512,332,520,328,516,336,440,404,520,332,520,328,524,328,520,332,512,336,516,328,524,328,520,332,520,328,528,332,508,380,468,332,520,1172,528,336,492,336,512,336,508,328,524,380,472,328,512,332,520,336,516,336,516,328,520,332,512,1172,528,344,492,336,508,328,520,328,524,1172,520,352,492, 0};

// プロトコル定義
#define START_BYTE 0x7f
#define CMD_AC_CTRL 0x02
#define CMD_TV_CTRL 0x03
#define MAX_MSG_SIZE 5

AndroidAccessory acc("MyManufacturer",
		     "IrRemoteControler",
		     "Android Open Accessory basic implementation",
		     "1.0",
		     "http://android.com",
		     "0000000012345678");

// メッセージバッファ
byte msg[MAX_MSG_SIZE];

void initPins()
{
  // デジタル出力ピンの初期化
  pinMode(DOUT0, OUTPUT);
  pinMode(DOUT1, OUTPUT);
  pinMode(DOUT2, OUTPUT);
  pinMode(DOUT3, OUTPUT);
  digitalWrite(DOUT0, LOW);
  digitalWrite(DOUT1, LOW);
  digitalWrite(DOUT2, LOW);
  digitalWrite(DOUT3, LOW);
}

void setup()
{
  Serial.begin(115200);
  Serial.print("\r\nStart");

  // 各入出力ピンの初期化を行う
  initPins();
    
  // アクセサリの電源ON
  acc.powerOn();
}


void loop()
{
  int b = 0;
  uint16_t val = 0;

  if (acc.isConnected()) {
    //
    // 受信処理
    //
    int len = acc.read(msg, sizeof(msg), 1);
    int i;

    if (msg[0] == START_BYTE && len >= msg[1]) {
      Serial.print("receive cmd:");
      Serial.print(msg[2], HEX);
      Serial.print("\r\n");

      switch (msg[2]) {
      case CMD_AC_CTRL:
        if (msg[3]) {
          sendIr(DATA_AC_ON, sizeof(DATA_AC_ON)/sizeof(DATA_AC_ON[0]));
        } else {
          sendIr(DATA_AC_OFF, sizeof(DATA_AC_OFF)/sizeof(DATA_AC_OFF[0]));
        }
        break;
      default:
	break;
      }
    }
  } else {
    // 接続が切れた場合、出力値をリセットする
    digitalWrite(DOUT0, LOW);
    digitalWrite(DOUT1, LOW);
    digitalWrite(DOUT2, LOW);
    digitalWrite(DOUT3, LOW);
  }
  delay(10);
}


//
// irDataからリモコン信号を送信
//
void sendIr(int *irData, int size) {
  Serial.print(size, DEC);
  for (int i = 0; i < size; i++) {
    Serial.print(".");
    unsigned long len = irData[i];
//    if (len == 0) break;      // 0なら終端。
    unsigned long startTime = micros();
    do {
      digitalWrite(IR_OUT, 0x1 - (i & 0x1)); // iが偶数なら赤外線ON、奇数なら0のOFFのまま
      delayMicroseconds(8);  // キャリア周波数38kHzでON/OFFするよう時間調整
      digitalWrite(IR_OUT, 0);
      delayMicroseconds(18);
    } while (long(startTime + len - micros()) > 0); // 送信時間に達するまでループ
  }
  Serial.print("OK\n");
}

